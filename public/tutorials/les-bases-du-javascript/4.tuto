## Tableaux & manipulation de données

Dans le langage courant comme en programmation, **un tableau est une collection ordonnée d'éléments**, que l'on peut également appeler "liste". Comme pour les variables, un tableau (_array_) peut contenir des valeurs de tout type : nombres, chaînes de caractères... et même d'autres tableaux ! On peut accéder à la taille d'un tableau grâce à l'attribut `length`, et à un élément spécifique d'un tableau grâce à son **indice** (_index_), c'est-à-dire sa position dans le tableau (en commençant par 0).

~~~
const awesomeArray = [42, 101, 97, 1515];
...
const h2g2Characters = ["Arthur", "Zaphod", "Ford", "Trillian", "Marvin"];
...
// En JavaScript, un tableau peut même contenir des variables de types différents :
const weirdArray = ["Slartibartfast", 42, true];
...
console.log(awesomeArray[0]);		// Affiche 42
console.log(awesomeArray[2]);		// Affiche 97
...
console.log(h2g2Characters.length);	// Affiche 5
...
console.log(h2g2Characters[h2g2Characters.length - 1]);
// Affiche le dernier élément du tableau, aka "Marvin"
~~~

Quand on souhaite stocker et manipuler des données, les tableaux sont donc très utiles. Encore plus utiles : les nombreuses méthodes que JavaScript met à ta disposition pour manipuler et transformer les tableaux. Beaucoup de ces méthodes prennent en paramètre une fonction fléchée, qui s'applique à chaque élément du tableau. Par exemple :

~~~
const h2g2Characters = ["Arthur", "Zaphod", "Ford", "Trillian", "Marvin"];
h2g2Characters.forEach(e => console.log(e));
// Affiche chacun des personnages l'un après l'autre
...
const awesomeArray = [42, 101, 97, 1515];
const doubleAwesomeArray = awesomeArray.map(e => e * 2);
console.log(doubleAwesomeArray);
// Affiche [84, 202, 194, 3030]
~~~

(i) Qu'est-ce qu'une "méthode" ? Dans les langages dits "orientés objet", une méthode est une fonction qui appartient à une classe. Par exemple, la méthode [`forEach()`](https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Array/forEach) est associée à l'objet `Array` en JavaScript : c'est pour cela qu'elle est appelée avec un `.`.
Plus simplement : si une fonction s'applique à un élément grâce à un `.`, c'est une méthode ; si l'élément est passé en paramètre, c'est une fonction.

À noter que le nom du paramètre de la fonction fléchée peut être n'importe quoi : personnellement, j'ai pour habitude d'utiliser `e` (pour "élément"). Outre [`forEach()`](https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Array/forEach) et [`map()`](https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Array/map) qui sont très utilisées, il existe plein d'autres méthodes :

~~~
const awesomeArray = [42, 101, 97, 1515];
...
console.log(awesomeArray.reverse());
// Affiche [1515, 97, 101, 42]
...
console.log(awesomeArray.sort());
// Affiche [42, 97, 101, 1515]
...
console.log(awesomeArray.slice(0, 2));
// Affiche [42, 101]
...
console.log(awesomeArray.indexOf(1515));
// Affiche 3
...
console.log(awesomeArray.includes(101));
// Affiche true
...
console.log(awesomeArray.filter(e => e > 100));
// Affiche [101, 1515]
...
console.log(awesomeArray.some(e => e >= 1000));
// Affiche true
...
console.log(awesomeArray.every(e => e < 1000));
// Affiche false
...
// Calcule et affiche la somme des éléments du tableau : 1755
console.log(awesomeArray.reduce((acc, value) => acc + value, 0));
~~~

Dans le détail :
- [`reverse()`](https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Array/reverse) renverse les éléments du tableau
- [`sort()`](https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Array/sort) trie les éléments du tableau
- [`slice()`](https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Array/slice) renvoie une "tranche" d'un tableau : ses paramètres sont l'indice de départ (inclus) et l'indice de fin (exclus)
- [`indexOf()`](https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Array/indexOf) renvoie l'indice de l'élément passé en paramètre
- [`includes()`](https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Array/includes) indique si oui ou non l'élément passé en paramètre est dans le tableau
- [`filter()`](https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Array/filter) renvoie les éléments pour lesquels la condition renvoyée par la fonction fléchée est vraie, sous la forme d'un nouveau tableau
- [`some()`](https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Array/some) renvoie `true` si la condition renvoyée par la fonction fléchée est vraie pour **au moins un élément du tableau**
- [`every()`](https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Array/every) renvoie `true` si la condition renvoyée par la fonction fléchée est vraie pour **tous les éléments du tableau**

À noter que plusieurs des attributs et méthodes des tableaux, notamment `length`, [`slice()`](https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/String/slice), [`indexOf()`](https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/String/indexOf) et [`includes()`](https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/String/includes), s'appliquent également aux chaînes de caractères (qui peuvent être vues comme des "tableaux de lettres").

[`reduce()`](https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Array/reduce) est une méthode très puissance mais plus difficile à appréhender. La fonction fléchée passée comme premier paramètre possède elle-même deux paramètres : le deuxième est l'élément du tableau, et le premier est un **accumulateur**. Le deuxième paramètre de [`reduce()`](https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Array/reduce) est la valeur initiale de l'accumulateur. La méthode fonctionne ainsi : pour chaque élément du tableau, l'accumulateur prend la valeur que renvoie la fonction fléchée ; la méthode renvoie alors la valeur finale de l'accumulateur. Dans l'exemple ci-dessus, on a dans le détail :
- Étape 0 :	`acc` = 0, `value` = 42 → `acc + value` = 42
- Étape 1 :	`acc` = 42, `value` = 97 → `acc + value` = 139
- Étape 2 :	`acc` = 139, `value` = 101 → `acc + value` = 240
- Étape 3 :	`acc` = 240, `value` = 1515 → `acc + value` = 1755
- Résultat : 1755

Tu l'auras compris, dans ce cas [`reduce()`](https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Array/reduce) permet tout simplement de calculer la somme des éléments d'un tableau ! [`reduce()`](https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Array/reduce) est une méthode très flexible mais perturbante au premier abord, donc ne t'inquiète pas si tout cela te semble flou pour le moment.

(i) Pas besoin de connaître par cœur comment fonctionnent toutes ces méthodes ! Si tu cliques sur le nom de l'une d'entre elles, tu arriveras sur [la documentation](https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Array) de Mozilla (la fondation qui édite le navigateur Firefox). Toutes les méthodes te sont expliquées, avec des exemples... et en français.
On croit souvent que les développeuses et les développeurs ont une mémoire phénoménale pour retenir toutes ces notions, mais en réalité on passe notre temps à consulter de la documentation ! C'est une bonne habitude à prendre dès maintenant, de même que savoir rechercher sur Google : cela te permettra d'apprendre par toi-même par la suite.

Une dernière chose à connaître sur les tableaux : l'**opérateur de décomposition** (_spread operator_). Admettons que tu souhaites ajouter un élément au début d'un tableau : tu peux utiliser l'opérateur `...` pour décomposer ton tableau en ses éléments individuels, avant de recomposer un nouveau tableau avec le nouvel élément. C'est plus facile à comprendre avec le code :

~~~
const h2g2Characters = ["Zaphod", "Ford", "Trillian", "Marvin"];
const moreH2g2Characters = ["Arthur", ...h2g2Characters];
console.log(moreH2g2Characters);
// Affiche ["Arthur", "Zaphod", "Ford", "Trillian", "Marvin"]
...
// Sans l'opérateur ..., on obtiendrait un tableau dans un tableau !
const wrongCharacters = ["Arthur", h2g2Characters];
console.log(wrongCharacters);
// Affiche ["Arthur", ["Zaphod", "Ford", "Trillian", "Marvin"]]
~~~

(S) Un tableau est une liste ordonnée d'éléments, auxquels on peut accéder grâce à leur indice (_index_).
De nombreuses méthodes existent pour manipuler des tableaux : `forEach()`, `map()`, `sort()`, `filter()`, `includes()`, `reduce()`... Pour voir la liste complète de ces méthodes et comment elles s'utilisent, tu peux consulter [la documentation](https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Array).
L'opérateur de décomposition `...` permet d'ajouter des éléments à un tableau ou bien de concaténer (coller) des tableaux entre eux.

***
