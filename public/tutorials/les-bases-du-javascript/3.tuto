## Fonctions

En programmation, un peu comme en maths, **une fonction est un bloc qui prend des variables en param√®tres et retourne une valeur**.

~~~
function sum(a, b) {
	return a + b;
}
...
console.log(sum(2, 2));	// Affiche 4
~~~

Dans l'exemple pr√©c√©dent, la fonction `sum` prend deux param√®tres `a` et `b` et renvoie la somme de ces deux nombres. Le corps de la fonction se situe entre les accolades, et peut contenir autant de lignes que n√©cessaires : comme √† l'int√©rieur d'un bloc `if`/`else`, ces lignes sont indent√©es. Le `return` doit forc√©ment √™tre sur la derni√®re ligne, puisqu'il a pour effet de sortir de la fonction ; s'il est omis ou s'il n'est suivi d'aucune valeur, la fonction renvoie `undefined`.

Depuis 2015 et la version dite ES6, JavaScript poss√®de √©galement une autre syntaxe pour les fonctions, que j'aurai tendance √† privil√©gier par la suite :

~~~
const sum = (a, b) => {
	return a + b;
}
~~~

Ici, la fonction est introduite par les caract√®res `=>` et est assign√©e √† une variable `const`. Ces "fonctions fl√©ch√©es" (_arrow functions_) ont l'avantage non seulement d'√™tre plus courtes, mais aussi de pouvoir √™tre √©crites sur une seule ligne si elles ne consistent qu'en un `return` :

~~~
const sum = (a, b) => a + b;
~~~

Une fonction ne peut renvoyer qu'une seule valeur mais elle peut √™tre de tout type, y compris des cha√Ænes de caract√®res, des tableaux ou des objets (on va bient√¥t en parler üòâ). Par exemple :

~~~
const greet = (name) => `Salut ${name}, comment vas-tu ?`;
...
console.log(greet("Tom"));	// Affiche "Salut Tom, comment vas-tu ?"
~~~

(i) Qu'est-ce que cette syntaxe √©trange avec ce `$` ? Il s'agit des [litt√©raux de gabarits](https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Litt%C3%A9raux_gabarits) (_template literals_), une syntaxe JavaScript super pratique permettant d'ins√©rer des variables dans une cha√Æne de caract√®res. Pour cela, il suffit de mettre la cha√Æne entre accents graves (_backticks_), puis d'y ins√©rer des variables en les introduisant par un dollar et une paire d'accolades.
Auparavant, il fallait utiliser l'op√©rateur `+` pour "concat√©ner" (coller) des cha√Ænes de caract√®res et des variables... ce qui rendait le code illisible ! Les litt√©raux de gabarits permettent de r√©gler ce probl√®me, et ils ont √©galement un autre avantage : ils permettent d'√©crire une cha√Æne de caract√®res sur plusieurs lignes, en y ins√©rant des retours √† la ligne.

Bien s√ªr, une fonction peut aussi ne pas prendre de param√®tre. Dans ce cas, les parenth√®ses sont tout de m√™me n√©cessaires, m√™me si elle sont vides :

~~~
function useless() {
	return 42;
}
...
const useless = () => 42;
...
console.log(useless());	// Affiche 42
~~~

(S) Une fonction est un bloc qui prend z√©ro, une ou plusieurs variable(s) en param√®tre(s), et renvoie une unique valeur.
Le corps de la fonction est entre accolades et indent√©. La derni√®re instruction d'une fonction doit √™tre la valeur de retour pr√©c√©d√©e du mot-cl√© `return`.
Une fonction peut s'√©crire de deux mani√®res : avec le mot-cl√© `function` ou bien sous la forme d'une "fonction fl√©ch√©e" assign√©e √† une variable. Si une fonction fl√©ch√©e ne consiste qu'en un `return`, celui-ci ainsi que les accolades peuvent √™tre omis et la fonction tient alors en une seule ligne.
Les litt√©raux de gabarits, c'est super cool !

***
